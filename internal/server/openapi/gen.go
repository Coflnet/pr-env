// Package apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apigen

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerApplicationSettingsModel defines model for server.applicationSettingsModel.
type ServerApplicationSettingsModel struct {
	Hostname *string `json:"hostname,omitempty"`
	Port     *int    `json:"port,omitempty"`
}

// ServerContainerSettingsModel defines model for server.containerSettingsModel.
type ServerContainerSettingsModel struct {
	Image    *string `json:"image,omitempty"`
	Registry *string `json:"registry,omitempty"`
}

// ServerEnvironmentModel defines model for server.environmentModel.
type ServerEnvironmentModel struct {
	ApplicationSettings *ServerApplicationSettingsModel `json:"applicationSettings,omitempty"`
	ContainerSettings   *ServerContainerSettingsModel   `json:"containerSettings,omitempty"`
	GitSettings         *ServerGitSettingsModel         `json:"gitSettings,omitempty"`
	Id                  *string                         `json:"id,omitempty"`
	Name                *string                         `json:"name,omitempty"`
}

// ServerGitSettingsModel defines model for server.gitSettingsModel.
type ServerGitSettingsModel struct {
	Organization *string `json:"organization,omitempty"`
	Repository   *string `json:"repository,omitempty"`
}

// ServerHttpError defines model for server.httpError.
type ServerHttpError struct {
	Message *map[string]interface{} `json:"message,omitempty"`
}

// PostEnvironmentJSONRequestBody defines body for PostEnvironment for application/json ContentType.
type PostEnvironmentJSONRequestBody = ServerEnvironmentModel

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new environment
	// (POST /environment)
	PostEnvironment(ctx echo.Context) error
	// Lists all instances of an environment
	// (GET /environment-instance/list/{owner})
	GetEnvironmentInstanceListOwner(ctx echo.Context, owner string) error
	// List all available Environments
	// (GET /environment/list)
	GetEnvironmentList(ctx echo.Context) error
	// Deletes an environment
	// (DELETE /environment/{owner}/{id})
	DeleteEnvironmentOwnerId(ctx echo.Context, owner string, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostEnvironment converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnvironment(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnvironment(ctx)
	return err
}

// GetEnvironmentInstanceListOwner converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironmentInstanceListOwner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", ctx.Param("owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owner: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnvironmentInstanceListOwner(ctx, owner)
	return err
}

// GetEnvironmentList converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnvironmentList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnvironmentList(ctx)
	return err
}

// DeleteEnvironmentOwnerId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnvironmentOwnerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithOptions("simple", "owner", ctx.Param("owner"), &owner, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owner: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEnvironmentOwnerId(ctx, owner, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/environment", wrapper.PostEnvironment)
	router.GET(baseURL+"/environment-instance/list/:owner", wrapper.GetEnvironmentInstanceListOwner)
	router.GET(baseURL+"/environment/list", wrapper.GetEnvironmentList)
	router.DELETE(baseURL+"/environment/:owner/:id", wrapper.DeleteEnvironmentOwnerId)

}
